<%  
var jdkMajorVersion = null;
if (context.settings && context.settings.jdkMajorVersion) {
  jdkMajorVersion = context.settings.jdkMajorVersion;  
}
jdkMajorVersion = jdkMajorVersion || '7';

if (jdkMajorVersion === '5') {
  jdkMajorVersion = '1.5.0'; 
}

var apiRootUri = 'http://docs.oracle.com/javase/' + jdkMajorVersion + '/docs/api/';

function makeClassUri(className) {
  return apiRootUri + className.replace(/\./g, '/') + '.html';    
}

function makeTypeLink(className) {
  if (className.indexOf('.') >= 0) {  
    return '<a href="' + makeClassUri(className) + '">' + _(className).escapeHTML() + '</a>';    
  } else {
    return _(className).escapeHTML()    
  }
}

function orderedModifiersText(modifiers) {
  var modifiersObj = {}
  _(modifiers || []).each(function (m) {
    modifiersObj[m] = true;  
  });

  var orderedModifiers = [];
  _(['public', 'protected', 'private', 'abstract', 'static', 'final']).each(function (p) {
    if (modifiersObj[p]) {
      orderedModifiers.push(p);        
    }  
  });

  var modifiersText = orderedModifiers.join(' ');

  if (modifiersText.length > 0) {
    modifiersText += ' ';
  }
  
  return modifiersText;
}

var results = recognitionResults['com.solveforall.recognition.programming.java.JdkClass'];

var rr = null;

if (results && (results.length > 0)) {
  rr = results[0];
}

var methodResults = recognitionResults['com.solveforall.recognition.programming.java.JdkMethod'];
var methodResult = null;

if (methodResults && (methodResults.length > 0)) {
  methodResult = methodResults[0];  
}

if (rr) {
  if (methodResult) {
    if (methodResult.recognitionLevel >= rr.recognitionLevel) {
      rr = methodResult;       
    }   
  }  
} else {
  rr = methodResult;   
}

if (!rr) {
  throw "No result found";   
}

var annotationsHtml = '';

_(rr.annotations || []).each(function (annotation) {
  annotationsHtml += _(annotation).escapeHTML();
  annotationsHtml += '\n';
});

var title = rr.qualifiedName;
var uri = apiRootUri + rr.path;
var implementsList = null;
var throwsHtml = '';

if (rr.kind === 'method') {
  title += '()';    
  
  throwsHtml = _(rr.throws || []).map(function (t) {
    return _(t).escapeHTML();    
  }).join(', ');
  
  if (throwsHtml.length > 0) {
    throwsHtml = '\nthrows ' + throwsHtml;    
  }  
} else {  
  implementsList = 'No interfaces implemented';

  if (rr.implements && (rr.implements.length > 0)) {
    implementsList = _(rr.implements).map(function (imp) {
      return makeTypeLink(imp);  
    }).join(', ');
  }
}
%>
<!doctype html>
<html>
  <head>
    <title><%= title %></title>
    <meta charset="UTF-8">
    <meta name="com.solveforall.meta.answer.label" content="<%= title %>" >
    <meta name="com.solveforall.meta.answer.uri" content="<%= uri %>" >
  </head>
  <body>    
    <% if (rr.kind === 'method') { %>
      <p>
        Method in <code><%- makeTypeLink(rr.qualifiedClass) %></code>:
      </p>
          
      <pre><%- annotationsHtml %><%= orderedModifiersText(rr.modifiers) %><%= rr.returnType %> <%= rr.name %>(<% _(rr.params).each(function (param, index) { if (index > 0) { %>,&nbsp;<%  } %><%- makeTypeLink(param.type) %> <%= param.name %><% }); %>)<%- throwsHtml %></pre>        
      <br>
      <p><strong>Parameters</strong>:
    
      <% if (rr.params.length > 0) { %>
        </p>
        <ul>        
          <% _(rr.params).each(function (param) { %>
            <li>      
              <strong><%= param.name %></strong>: <%= param.description %>
            </li>
          <% }); %>
        </ul>
      <% } else { %>
        None</p>
      <% } %>
    
      <% if (rr.returns) { %>
        <p>
          <strong>Returns</strong>: <%= rr.returns %>
        </p>  
      <% } %>
    
      <p>
        <%= rr.description %>    
      </p>
    
      <% if (rr.since) { %>
        <p>
          <strong>Since</strong>: <%= rr.since %>  
        </p>
      <% } %>
    
    <% } else { %>
    
      <pre><%- annotationsHtml %><%= orderedModifiersText(rr.modifiers) %><%= rr.kind %> <%= (rr.kind === 'annotation') ? '@' : '' %><%= rr.qualifiedClass %></pre>
      <% if (rr.superClass) { %>
        <p>
          <strong>Extends</strong>: <%- makeTypeLink(rr.superClass) %>
        </p>
      <% } %>
      <% if (rr.kind !== 'annotation') { %>
        <p>
          <strong>Implements</strong>: <%- implementsList %>
        </p>    
      <% } %>
      <p>
        <%= rr.description %>    
      </p>
      <% if (rr.since) { %>
        <p>
          <strong>Since</strong>: <%= rr.since %>  
        </p>
      <% } %>

      <% if (rr.kind !== 'annotation') { %>
        <% if (rr.methods && (rr.methods.length > 0)) { %>
          <p><strong>Methods</strong>:</p>
          <ul>
            <% _(rr.methods).each(function (m) { %>
              <li>
                <a href="<%= apiRootUri + m.path %>">
                  <code>
                  <%= orderedModifiersText(m.modifiers) %><%= m.returnType %> <%= m.name %>(<% _(m.params).each(function (param, index) { 
                      if (index > 0) {
                  %>,&nbsp;<%  } %><%- makeTypeLink(param.type) %> <%= param.name %>                
                  <% }); %>
                  )
                  </code>
                </a>  
                <br/>
                <%= m.description %>
              </li>
            <% }); %>    
          </ul>
        <% } else { %>
          <p>No methods</p>
        <% } %>    
      <% } %>
    <% } %>
    <p>
      <small>      
        View full docs at <a href="<%= uri %>">docs.oracle.org</a>
      </small>
    </p>
  </body>
</html>