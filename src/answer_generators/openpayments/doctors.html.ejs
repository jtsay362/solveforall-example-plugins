<%
const allResults = recognitionResults['com.solveforall.recognition.medical.OpenPaymentsDoctor'];

if (!allResults) {
  throw 'No results found';
}

const results = _(allResults).filter(rr => {
  return (rr.recognitionLevel >= 0.1);
});

const numeral = require('numeral');

function makeShortLocation(rr)  {
  let s = '';

  if (rr.city) {
    s += rr.city;
    if (rr.state) {
      s += ', ';
    } else {
      s += ' ';
    }
  }

  if (rr.state) {
    s += rr.state;
  }

  if (!s) {
    s = '(Unknown)';
  }
  return s;
}

function makeMapUrl(rr) {
  let u = 'https://maps.google.com/maps?q=';

  let address = _(['addressLine1','city','state']).chain().compact().map(p => {
    return rr[p];
  }).value().join(',');

  if (rr.zipCode) {
    address += ' ' + rr.zipCode;
  }

  return u + encodeURIComponent(address);
}

function makeLocationHtml(rr) {
  let s = '';

  if (rr.addressLine1) {
    s += _.escape(rr.addressLine1) +
     ' (<a href="' + _.escape(makeMapUrl(rr)) + '">Map</a>)<br>';
  }
  if (rr.addressLine2) {
    s += _.escape(rr.addressLine2) + '<br>';
  }

  s += _.escape(makeShortLocation(rr));

  if (rr.zipCode) {
    s += ' ' + _.escape(rr.zipCode);
  }

  return s;
}

function makeTotalPayments(rr) {
  if (rr.totalPayments) {
    return numeral(rr.totalPayments).format('($ 0,0)');
  } else {
    return 'None';
  }
}

function makeNumPayments(rr) {
  if (rr.numPayments) {
    return numeral(rr.numPayments).format('0,0');
  } else {
    return 'None';
  }
}

function makeDoctorUrl(rr) {
  return 'https://projects.propublica.org/docdollars/doctors/pid/' +
    rr.documentId;
}

function makeCompanyUrl(companyName) {
  return 'https://projects.propublica.org/docdollars/company/' +
    companyName.toLowerCase().replace(/\W+/g, '-').replace(/\-+$/, '');
}

%>
<html>
  <head>
    <meta name="com.solveforall.meta.answer.uri" content=
    <% if (results.length === 1) { %>
       "<%= makeDoctorUrl(results[0]) %>"
    <% } else { %>
       "https://projects.propublica.org/docdollars/query?utf8=%E2%9C%93&query=<%= encodeURIComponent(q) %>"
    <% } %>
    >
    <style>
      .number_td {
        text-align: right;
      }
    </style>
  </head>
  <body>
    <% if (results.length === 1) {
         const singleResult = results[0];  %>
      <h3><%= singleResult.names[0] %></h3>

      <p>
        <%= singleResult.specialty %>
      </p>

      <p>
        <%- makeLocationHtml(singleResult) %>
      </p>

      <% if (singleResult.statesLicensed.length > 0) { %>
      <p>
        Licensed in (during 2014): <%= singleResult.statesLicensed.join(', ') %>
      <p>
      <% } %>

      <h4>Payments received by medical companies in 2014:</h4>
      <p>
        Total amount paid:
        <b><%= makeTotalPayments(singleResult) %></b>
      </p>
      <p>
        Number of payments:
        <b><%= makeNumPayments(singleResult) %></b>
      </p>
      <% if (singleResult.topSources.length > 0) { %>
      <h4>Top payers:</h4>
      <table class="table table-striped table-condensed">
        <thead>
          <th>
            Company
          </th>
          <th class="number_td">
            Total Payments
          </th>
        </thead>
        <tbody>
        <% for (let i = 0; i < singleResult.topSources.length; i++) {
             const source = singleResult.topSources[i]; %>
          <tr>
            <td>
              <a href="<%= makeCompanyUrl(source.companyName) %>"><%= source.companyName %></a>
            </td>
            <td class="number_td">
              <%= numeral(source.amount).format('($ 0,0)') %>
            </td>
          </tr>
        <% } %>
        </tbody>
      </table>
      <% } %>
   <% } else { %>
     <h3><%= results.length %> Matching Doctors</h3>

     <table class="table table-striped table-condensed">
       <thead>
         <th>
           Name
         </th>
         <th>
           Location
         </th>
         <th class="number_td">
           Total Payments
         </th>
         <th class="number_td">
           # of Payments
         </th>
         <th>
           Top Payers
         </th>
       </thead>
       <tbody>
        <% for (let i = 0; i < results.length; i++) {
             const rr = results[i]; %>
          <tr>
            <td><a href="<%= makeDoctorUrl(rr) %>"><%= rr.names[0] %></a></td>
            <td><%= makeShortLocation(rr) %></td>
            <td class="number_td"><%= makeTotalPayments(rr) %></td>
            <td class="number_td"><%= makeNumPayments(rr) %></td>
            <td>
              <%- rr.topSources.map(source => {
                    return '<a href="' + makeCompanyUrl(source.companyName) + '">' +
                      _.escape(source.companyName) + '</a>';
                  }).join(', ') %>
            </td>
          </tr>
        <% } %>
       </tbody>
     </table>
   <% } %>
   <small>
     Data from <a href="https://www.cms.gov/OpenPayments/index.html">Open Payments</a>.
     To explore more, see <a href="https://projects.propublica.org/docdollars/">Dollars for Docs</a>.
   </small>
  </body>
</html>
