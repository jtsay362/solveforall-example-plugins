<%
const results = recognitionResults['com.solveforall.recognition.WikipediaArticle'];
if (!results || (results.length < 1)) {
  return null;
}

let result, text;
imageUris = [];
altImageUris = [];
let i = 0;
do {
  let r = results[i];
  imageUris = _.compact([r.thumbnailImageUri, r.depictionImageUri]);
  text = r.longAbstract_en;
  if ((imageUris.length > 0) || text) {
    result = r;
  }
  if (text) {
    text = text.replace(/\-+/g, '-');
  }

  i++;
} while (!result && (i < results.length));

if (!result) {
  throw 'No eligible result found.';
}

const label = ' (' + result.humanFormattedArticle_en.replace('(', '[').replace(')', ']') + ')';

const settings = context.settings;
const maxAbstractCharacters = settings.maxAbstractCharacters ||
  (context.isSuggestionQuery ? 10000 : 570);
const showImage = (imageUris.length > 0) && (settings.showImage !== 'false');

let requiresExplicitHeight = false;
if (showImage) {
  for (let i = 0; i < imageUris.length; i++) {
    let imageUri = imageUris[i];

    // Wikipedia support HTTPS on all URLs now!
    if (_.str.startsWith(imageUri, 'http:')) {
      imageUri = 'https' + imageUri.substr(4);
    }

    imageUris[i] = imageUri;

    let altImageUri;
    if (imageUri.indexOf('/commons/') > 0) {
      altImageUri = imageUri.replace('/commons/', '/en/');
    } else if (imageUri.indexOf('/en/') > 0) {
      altImageUri = imageUri.replace('/en/', '/commons/');
    }

    if (altImageUri) {
      altImageUris.push(altImageUri);
    }
  }
}

let pruned = null;
let remaining = null;
if (text && (text.length > maxAbstractCharacters)) {
  let x = text.substring(0, maxAbstractCharacters);
  let chopped = _(x).strRightBack('.');

  pruned = x.substring(0, x.length - chopped.length);

  // Avoid just a short sentence that is hidden.
  if (text.length - pruned.length < 100) {
    pruned = null;
  } else {
    remaining = text.substring(pruned.length);
  }
}

// TODO: use settings and/or size of area
const mapZoomLevel = 15;

const semanticProps = result.semanticProps || {};
let semanticPropsArray = [];
let description;

const RANGE_SUFFIXES = ['YearsStartDate', 'YearsEndDate', 'YearsStartYear',
  'YearsEndYear'];
const dateRanges = {};
const IGNORED_VALUE_PREFIXES = ['List of'];
const IGNORED_NAME_ARRAY = [
  'Background', 'Demonym', 'Flag',
  'Viaf', 'Name', 'Homepage', 'Leader name', 'Leader title',
  'Occupation', 'Population as of', 'Lccn', 'Individualised gnd', 'Term period',
  'Time zone', 'Rdf schema#see also', 'Type'
];
const IGNORED_NAMES = {};
IGNORED_NAME_ARRAY.forEach(name => IGNORED_NAMES[name] = true);

const NAME_CHANGES = {
  'Is part of' : 'Part of',
  'Nick' : 'Nickname',
  'Point' : 'Geolocation',
  'Area land' : 'Land area',
  'Area total' : 'Total area',
  'Area water' : 'Water area',
  'Elevation' : 'Elevation (mean)',
  'Percentage of area water' : 'Water area (%)',
  'Population metro' : 'Population (metro)',
  'Population total' : 'Population (total)',
  'Population total ranking' : 'Population rank',
  'Population urban' : 'Population (urban)',
  'Utc offset' : 'UTC offset',
  'Area code' : 'Area code(s)',
  'Postal code' : 'Postal code(s)',
  'Networth' : 'Net Worth'
};

const KILOMETER_SQUARED_AREA_UNITS = {
  factor: 1e-6,
  unit: ' km<sup>2</sup>'
};

const METER_LENGTH_UNITS = {
  unit: ' m'
};

const NAME_TO_UNITS = {
  'Area land' : KILOMETER_SQUARED_AREA_UNITS,
  'Area total' : KILOMETER_SQUARED_AREA_UNITS,
  'Area water' : KILOMETER_SQUARED_AREA_UNITS,
  'Elevation' : METER_LENGTH_UNITS,
  'Maximum elevation' : METER_LENGTH_UNITS,
  'Minimum elevation' : METER_LENGTH_UNITS,
  'Percentage of area water' : {
    unit: '%'
  },
  'Population density' : {
    unit: ' people / km<sup>2</sup>'
  },
  'Runtime' : {
    factor: 1.0 / 60,
    unit: ' min'
  },
  'Population metro' : {
    unit: ' people'
  },
  'Population total' : {
    unit: ' people'
  },
  'Population urban' : {
    unit: ' people'
  },
  'Utc offset' : {
    unit: ' hour(s)'
  }
};

const QUALIFIER_PREFIXES = ['Minimum', 'Maximum', 'Total'];

const moment = require('moment');
const numeral = require('numeral');

function humanizeUriValue(v) {
  // Fix weird slash as in org.dbpedia.resource.Mayor–council_government
  const x = v.value.replace(/\–/g, '-');
  if (v.kind !== 'uri') {
    return x;
  }

  return x.substr(x.lastIndexOf('.') + 1).replace(/_+/g, ' ');
}

Object.keys(semanticProps).forEach(k => {
  try {
    const v = semanticProps[k];
    if (k && v && v.value) {
      switch (k) {
        case 'org.w3.www.1999.02.22-rdf-syntax-ns#type':
        case 'org.w3.www.2003.01.geo.wgs84_pos#lat':
        case 'org.w3.www.2003.01.geo.wgs84_pos#long':
        case 'org.w3.www.2002.07.owl#differentFrom':
        return;
      }

      const lastDotIndex = k.lastIndexOf('.');
      let name = _.str.humanize(_.str.capitalize(k.substr(lastDotIndex + 1)));
      let label = name;
      const kind = v.kind;
      let value = v.value;
      let doLink = false;

      if (kind === 'uri') {
        if (value.indexOf('__') >= 0) {
          return;
        }

        value = humanizeUriValue(v);
        doLink = true;
      }

      if (IGNORED_NAMES[name]) {
        return;
      }

      switch (name) {
        case 'Description':
        description = _.str.capitalize(value);
        return;

        default: {
          let alias = NAME_CHANGES[name];
          if (alias) {
            label = alias;
          } else {
            for (let i = 0; i < QUALIFIER_PREFIXES.length; i++) {
              const prefix = QUALIFIER_PREFIXES[i];

              if (!alias && _.str.startsWith(name, prefix)) {
                alias = _.str.capitalize(name.substr(prefix.length + 1)) + ' (';

                switch (prefix) {
                  case 'Maximum':
                  alias += 'max';
                  break;

                  case 'Minimum':
                  alias += 'min';
                  break;

                  default:
                  alias += name.substr(0, prefix.length).toLowerCase();
                  break;
                }

                alias += ')';
              }
            }
            if (alias) {
              label = alias;
            }
          }
        }
        break;
      }

      if ((value.indexOf('__') >= 0) || _(IGNORED_VALUE_PREFIXES).find(function (prefix) {
          return _.str.startsWith(value, prefix);
      })) {
        return;
      }

      if (v.dataType === 'date') {
        value = moment(value).format('ll');
      }

      let doPush = true;
      for (let rangeIndex = 0; rangeIndex < RANGE_SUFFIXES.length; rangeIndex++) {
        const suffix = RANGE_SUFFIXES[rangeIndex];
        if (_.str.endsWith(k, suffix)) {
          const dateRangeName = k.substring(lastDotIndex + 1, k.length - suffix.length);
          dateRanges[dateRangeName] = dateRanges[dateRangeName] || {};

          if (suffix.indexOf('Start') > 0) {
            dateRanges[dateRangeName].start = value;
          } else {
            dateRanges[dateRangeName].end = value;
          }
          doPush = false;
        }
      }

      if (doPush) {
        const unitData = NAME_TO_UNITS[name] || {};
        const unit = unitData.unit || '';
        const factor = unitData.factor || 1;
        const floatFormat = (!!unitData.unit || !!unitData.factor) ? '0,0' :
          '0,0.0';

        switch (v.dataType) {
          case 'usDollar':
          value = _.escape(numeral(parseFloat(value)).format('($ 0.00 a)'));
          break;

          case 'http://www.w3.org/2001/XMLSchema#nonNegativeInteger':
          value = _.escape(numeral(parseFloat(value * factor)).format('0,0')) + unit;
          break;

          case 'float':
          case 'http://www.w3.org/2001/XMLSchema#double':
          value = _.escape(numeral(parseFloat(value * factor)).format(floatFormat)) + unit;
          break;

          default:
          value =  _.escape(value) + unit;
          break;
        }

        semanticPropsArray.push([label, value, doLink]);
      }
    }
  } catch (e) {
    console.warn('Error processing prop "' + name + '", value "' + value + '"');
  }
});

// If there is a birth date, remove birth year, month, etc.
const SKIP = '__SKIP__';

semanticPropsArray.forEach(t => {
  const lowerName = t[0].toLowerCase();

  ['year', 'month', 'day'].forEach(period => {
    if (_.str.endsWith(lowerName, ' ' + period)) {
      const prefix = lowerName.substr(0, lowerName.length - period.length);
      const datePropertyName = prefix + 'date';
      const dateTuple = _(semanticPropsArray).find(function (t2) {
        return (datePropertyName === t2[0].toLowerCase());
      });

      if (dateTuple) {
        t[0] = SKIP;
      }
    }
  });
});

semanticPropsArray = _(semanticPropsArray).reject(t => (t[0] === SKIP));

const leaderName = semanticProps['org.dbpedia.ontology.leaderName'];
const leaderTitle = semanticProps['org.dbpedia.ontology.leaderTitle'];

if (leaderName && leaderName.value && leaderTitle && leaderTitle.value) {
  semanticPropsArray.push([leaderTitle.value,
    _.escape(humanizeUriValue(leaderName)), true]);
}

semanticPropsArray = _(semanticPropsArray).sortBy(t => {
  const name = t[0];

  // Ensures birth name comes before birth date and birth place
  const nameIndex = name.indexOf('name');
  if (nameIndex >= 0) {
    return name.substr(0, nameIndex) + '0' + name.substr(nameIndex + 1);
  }

  // Move Associated properties to the end
  if (name.indexOf('ssociat') > 0) {
    return 'zzzz' +  name;
  }

  // Ensure max value is after mean and min
  const maxIndex = name.indexOf('(max)');
  if (maxIndex > 0) {
    return name.substr(0, maxIndex) + '(zzzz';
  }

  return name;
});

_(dateRanges).chain().pairs().sortBy(t => t[0]).each(t => {
  let v = '';

  const start = t[1].start;

  if (start) {
    v += start;
  } else {
    v += '(Unknown)';
  }

  const end = t[1].end;

  if (end) {
    if (end !== start) {
      v += ' ~ ' + end;
    }
  } else {
    v += ' ~ present';
  }

  semanticPropsArray.push([_.str.capitalize(t[0]), _.escape(v), false]);
});
%>
<!doctype html>
<html>
  <head>
    <title>Wikipedia Infobox</title>
    <meta name="com.solveforall.meta.answer.uri"
     content="https://wikipedia.org/wiki/<%= result.article %>">
    <meta name="com.solveforall.meta.answer.embeddable" content="true">
    <meta name="com.solveforall.meta.answer.relevance"
     content="<%= result.recognitionLevel %>">
    <meta name="com.solveforall.meta.answer.eligible_as_best_answer"
     content="<%= (q.indexOf('wikipedia') >= 0) %>">

    <style>
    .top_container {
      max-width: 760px;
    }
    .title {
      text-align: left;
      font-size: 20px;
      font-weight: bold;
    }
    .description {
      font-size: 18px;
    }
    .image_container {
      float: left;
      margin-right: 14px;
    }
    img.with_fallback {
      margin-top: 5px;
      margin-bottom: 6px;
    }
    .clear {
      clear: both;
    }
    .semantic_props_container {
      margin-top: 6px;
    }
    .property_name {
      /* Otherwise max-width isn't honored. */
      display: block;
      width: 212px;
      max-width: 33vw;
      padding-right: 16px;
      text-align: right;
    }
    </style>
  </head>
  <body>
    <div class="top_container">
      <p class="text-justify">
        <% if (showImage) { %>
          <span class="image_container">
            <a href="<%= imageUris[0] %>"  target="_top">
              <img
                <% let imageIndex = 0;
                   imageUris.concat(altImageUris).forEach(imageUri => { %>
                     data-img-src-<%- imageIndex %>="<%= imageUri %>"
                <%   imageIndex++;
                   }); %>
                class="with_fallback img-rounded" width="200"
                <% if (requiresExplicitHeight) { %>
                height="200"
                <% } %>
              >
            </a>
          </span>
        <% } %>

        <span class="title"><%= result.humanFormattedArticle_en %></span>

        <% if (description) { %>
          <span class="description">(<%= description %>)</span>
        <% } %>

        <small>
          &nbsp;&nbsp;
          <a href="https://wikipedia.org/wiki/<%= result.article %>"
           target="_top">Full article</a>

          <% if (result.homePageUri) { %>
            &nbsp;&nbsp;|&nbsp;&nbsp;<a href="<%= result.homePageUri %>" target="_top">Website</a>
          <% } %>

          <% if (result.geoLocation) {
              const lat = result.geoLocation.lat.toFixed(5);
              const lon = result.geoLocation.lon.toFixed(5);
          %>
            &nbsp;&nbsp;|&nbsp;&nbsp;
            <a href="https://www.openstreetmap.org/?mlat=<%= lat %>&mlon=<%= lon %>#map=<%= mapZoomLevel %>/<%= lat %>/<%= lon %>" target="_top">Map</a>
          <% } %>
        </small>
        <br/>

        <span>
          <% if (text) { %>
            <span>
            <% if (pruned) { %>
              <%= pruned %>
              <span class="content_expander"><i class="content_expander_label">More ...</i> <i class="fa fa-chevron-down"></i></span>
            <% } else { %>
              <%= text %>
            <% } %>
            </span>
          <% } %>

          <% if (remaining) { %>
            <span class="content_expandable initially_hidden">
              <%= remaining %>
            </span>
          <% } %>
        </span>
      </p>
    </div>
    <div class="clear"></div>
    <% if (semanticPropsArray.length > 0) { %>
      <div class="semantic_props_container">
        <table>
          <thead></thead>
          <tbody>
          <% semanticPropsArray.forEach(t => { %>
            <tr>
              <td class="property_name"><b><%= t[0] %></b></td>
              <td>
                <% if (t[2]) { %>
                  <a href="https://solveforall.com/answers.do?q=<%= encodeURIComponent(t[1]) %>">
                <% } %>
                  <%- t[1] %>
                <% if (t[2]) { %>
                  </a>
                <% } %>
              </td>
            </tr>
          <% }); %>
          </tbody>
        </table>
      </div>
    <% } %>
  </body>
</html>
