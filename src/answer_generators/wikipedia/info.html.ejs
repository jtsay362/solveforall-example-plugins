<%
const results = recognitionResults['com.solveforall.recognition.WikipediaArticle'];
if (!results || (results.length < 1)) {
  return null;
}

let result, imageUri, altImageUri, text;
let i = 0;
do {
  let r = results[i];
  imageUri = r.depictionImageUri || r.thumbnailImageUri;
  text = r.longAbstract_en;
  if (imageUri || text) {
    result = r;
  }
  i++;
} while (!result && (i < results.length));

if (!result) {
  throw 'No eligible result found.';
}

const label = ' (' + result.humanFormattedArticle.replace('(', '[').replace(')', ']') + ')';

const settings = context.settings;
const maxAbstractCharacters = settings.maxAbstractCharacters ||
  (context.isSuggestionQuery ? 10000 : 570);
const showImage = imageUri && (settings.showImage !== 'false');

let requiresExplicitHeight = false;
if (showImage) {
  // Wikipedia support HTTPS on all URLs now!
  if (_.str.startsWith(imageUri, 'http:')) {
    imageUri = 'https' + imageUri.substr(4);
  }

  if (imageUri.indexOf('/commons/') > 0) {
    altImageUri = imageUri.replace('/commons/', '/en/');
  } else if (imageUri.indexOf('/en/') > 0) {
    altImageUri = imageUri.replace('/en/', '/commons/');
  }
}

let pruned = null;
let remaining = null;
if (text && (text.length > maxAbstractCharacters)) {
  let x = text.substring(0, maxAbstractCharacters);
  let chopped = _(x).strRightBack('.');

  pruned = x.substring(0, x.length - chopped.length);

  // Avoid just a short sentence that is hidden.
  if (text.length - pruned.length < 100) {
    pruned = null;
  } else {
    remaining = text.substring(pruned.length);
  }
}

// TODO: use settings and/or size of area
const mapZoomLevel = 15;

const semanticProps = result.semanticProps || {};
let semanticPropsArray = [];
let description;

const RANGE_SUFFIXES = ['YearsStartYear', 'YearsEndYear'];
const dateRanges = {};

_(semanticProps).chain().keys().each(function (k) {
  const v = semanticProps[k];
  if (k && v && v.value) {
    const lastDotIndex = k.lastIndexOf('.');
    const name = _.str.humanize(_.str.capitalize(k.substr(lastDotIndex + 1)));
    const kind = v.kind;
    let value = v.value;
    if (kind === 'uri') {
      value = value.substr(value.lastIndexOf('.') + 1).replace('_', ' ');
    }

    switch (name) {
      case 'Viaf':
      case 'Name':
      return;

      case 'Description':
      description = _.str.capitalize(value);
      return;

      default: break;
    }


    if (value.indexOf('__') >= 0) {
      return;
    }

    let doPush = true;
    for (let rangeIndex = 0; rangeIndex < RANGE_SUFFIXES.length; rangeIndex++) {
      const suffix = RANGE_SUFFIXES[rangeIndex];
      if (_.str.endsWith(k, suffix)) {
        const dateRangeName = k.substring(lastDotIndex + 1, k.length - suffix.length);
        dateRanges[dateRangeName] = dateRanges[dateRangeName] || {};

        if (suffix.indexOf('Start') > 0) {
          dateRanges[dateRangeName].start = value;
        } else {
          dateRanges[dateRangeName].end = value;
        }
        doPush = false;
      }
    }

    if (doPush) {
      semanticPropsArray.push([name, value]);
    }
  }
});

// If there is a birth date, remove birth year, month, etc.
const SKIP = '__SKIP__';

_(semanticPropsArray).each(function (pair) {
  const name = pair[0];
  const lowerName = name.toLowerCase();

  _(['year', 'month', 'day']).each(function (period) {
    if (_.str.endsWith(lowerName, ' ' + period)) {
      const prefix = lowerName.substr(0, lowerName.length - period.length);
      const datePropertyName = prefix + 'date';
      const datePair = _(semanticPropsArray).find(function (pair2) {
        return (datePropertyName === pair2[0].toLowerCase());
      });

      if (datePair) {
        pair[0] = SKIP;
      }
    }
  });
});

semanticPropsArray = _(semanticPropsArray).reject(function (pair) {
  return (pair[0] === SKIP)
});

semanticPropsArray = _(semanticPropsArray).sortBy(function (pair) {
  const name = pair[0];

  // Ensures birth name comes before birth date and birth place
  const nameIndex = name.indexOf('name');
  if (nameIndex >= 0) {
    return name.substr(0, nameIndex) + '0' + name.substr(nameIndex + 1);
  }

  return name;
});

_(dateRanges).chain().pairs().sortBy(function (pair) {
  return pair[0];
}).each(function (pair) {
  let v = '';

  const start = pair[1].start;

  if (start) {
    v += start;
  } else {
    v += '(Unknown)';
  }

  const end = pair[1].end;

  if (end) {
    if (end !== start) {
      v += ' - ' + end;
    }
  } else {
    v += ' -';
  }

  semanticPropsArray.push([_.str.capitalize(pair[0]), v]);
});
%>
<!doctype html>
<html>
  <head>
    <title>Wikipedia Infobox</title>
    <meta name="com.solveforall.meta.answer.uri"
     content="https://wikipedia.org/wiki/<%= result.article %>">
    <meta name="com.solveforall.meta.answer.embeddable" content="true">
    <meta name="com.solveforall.meta.answer.relevance"
     content="<%= result.recognitionLevel %>">
    <style>
    .top_container {

    }
    .title {
      font-size: 20px;
      font-weight: bold;
    }
    .description {
      font-size: 18px;
    }
    .image_container {
      float: left;
      margin-right: 14px;
    }
    img.with_fallback {
      margin-top: 5px;
      margin-bottom: 6px;
    }
    .clear {
      clear: both;
    }
    .semantic_props_container {
      margin-top: 6px;
    }
    .semantic_props_container td {
      padding-right: 16px;
    }
    </style>
  </head>
  <body>
    <div class="top_container">
      <p class="text-justify">
        <% if (showImage) { %>
          <span class="image_container">
            <a href="<%= imageUri %>"  target="_top">
              <img data-img-src-0="<%= imageUri %>"
                <% if (altImageUri) { %>
                  data-img-src-1="<%= altImageUri %>"
                <% } %>
                class="with_fallback img-rounded" width="200"
                <% if (requiresExplicitHeight) { %>
                height="200"
                <% } %>
              >
            </a>
          </span>
        <% } %>

        <span class="title"><%= result.humanFormattedArticle %></span>

        <% if (description) { %>
          <span class="description">(<%= description %>)</span>
        <% } %>

        <small>
          &nbsp;&nbsp;
          <a href="https://wikipedia.org/wiki/<%= result.article %>"
           target="_top">Full article</a>

          <% if (result.homePageUri) { %>
            &nbsp;&nbsp;|&nbsp;&nbsp;<a href="<%= result.homePageUri %>" target="_top">Website</a>
          <% } %>

          <% if (result.geoLocation) { %>
            &nbsp;&nbsp;|&nbsp;&nbsp;
            <a href="https://www.openstreetmap.org/#map=<%= mapZoomLevel %>/<%= result.geoLocation.lat %>/<%= result.geoLocation.lon %>" target="_top">Map</a>
          <% } %>
        </small>
        <br/>

        <span>
          <% if (text) { %>
            <span>
            <% if (pruned) { %>
              <%= pruned %>
              <span class="content_expander"><i class="content_expander_label">More ...</i> <i class="fa fa-chevron-down"></i></span>
            <% } else { %>
              <%= text %>
            <% } %>
            </span>
          <% } %>

          <% if (remaining) { %>
            <span class="content_expandable initially_hidden">
              <%= remaining %>
            </span>
          <% } %>
        </span>
      </p>
    </div>
    <div class="clear"></div>
    <% if (semanticPropsArray.length > 0) { %>
      <div class="semantic_props_container">
        <table>
          <thead></thead>
          <tbody>
          <% _(semanticPropsArray).each(function (pair) { %>
            <tr>
              <td><b><%= pair[0] %></b></td>
              <td><%= pair[1] %></td>
            </tr>
          <% }); %>
          </tbody>
        </table>
      </div>
    <% } %>
  </body>
</html>
